package io.github.kongpf8848.pattern.adapter;

/**
 * Created by pengf on 2017/3/3.
 */
public class _description {

    /*
    适配器模式,是把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不兼容而无法一起工作的两个类能够在一起工作
     */

    /*
    3.1 目标接口（Target）：客户所期待的接口。目标可以是具体的或抽象的类，也可以是接口。
    3.2 需要适配的类（Adaptee）：需要适配的类或适配者类。
    3.3 适配器（Adapter）：通过包装一个需要适配的对象，把原接口转换成目标接口。


 适配器模式的优点

　　更好的复用性
     系统需要使用现有的类，而此类的接口不符合系统的需要。那么通过适配器模式就可以让这些功能得到更好的复用。
   更好的扩展性
      在实现适配器功能的时候，可以调用自己开发的功能，从而自然地扩展系统的功能。

   将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，而无须修改原有代码。


适配器模式的缺点
　　过多的使用适配器，会让系统非常零乱，不易整体进行把握。

    适配器模式适用情况包括：系统需要使用现有的类，而这些类的接口不符合系统的需要；想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类一起工作。

    最直接的就是InputStreamReader和OutputStreamWriter就是InputStream和OutputStream针对Reader和Writer接口的适配。
     */

}
